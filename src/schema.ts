/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/project/forcequitlocalproject": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Force quit an active disguise project */
		post: operations["Project_ForceQuitLocalProject"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/project/quitlocalproject": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Quit an active disguise project */
		post: operations["Project_QuitLocalProject"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/project/restartlocalproject": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Restart an active disguise project */
		post: operations["Project_RestartLocalProject"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/project/startlocalproject": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Start a disguise project */
		post: operations["Project_StartLocalProject"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/system/detectsystems": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List all remote machines and local machine system info */
		get: operations["System_DetectSystems"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/system/gpuoutputs": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List all GPU Output (only works on d3 machine) */
		get: operations["System_GetGPUOutputs"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/system/networkadapters": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List all Network Adapters */
		get: operations["System_GetNetworkAdapters"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/system/projects": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List all projects */
		get: operations["System_ListProjects"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/system/vfcs": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List all VFC Cards */
		get: operations["System_GetVFCs"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		d3apiEmptyResponse: {
			status?: components["schemas"]["rpcStatus"];
		};
		projectStartLocalProjectRequest: {
			/** Path to the Project
			 *     Path is relative to the disguise projects folder set in d3Manager, ie: "[project name]/[project file.d3]" */
			projectPath?: string;
			/** @description Is machine is running in the solo mode.
			 *     Solo mode means that project is running on a standalone machine (not director set), so not as part of a wider session. */
			soloMode?: boolean;
			/** @description Allows to force upgrade the project.
			 *     This flag only applies if the project being run was created in an older version of D3 and needs to be updated. */
			allowUpgrade?: boolean;
		};
		/** @description `Any` contains an arbitrary serialized protocol buffer message along with a
		 *     URL that describes the type of the serialized message.
		 *
		 *     Protobuf library provides support to pack/unpack Any values in the form
		 *     of utility functions or additional generated methods of the Any type.
		 *
		 *     Example 1: Pack and unpack a message in C++.
		 *
		 *         Foo foo = ...;
		 *         Any any;
		 *         any.PackFrom(foo);
		 *         ...
		 *         if (any.UnpackTo(&foo)) {
		 *           ...
		 *         }
		 *
		 *     Example 2: Pack and unpack a message in Java.
		 *
		 *         Foo foo = ...;
		 *         Any any = Any.pack(foo);
		 *         ...
		 *         if (any.is(Foo.class)) {
		 *           foo = any.unpack(Foo.class);
		 *         }
		 *
		 *     Example 3: Pack and unpack a message in Python.
		 *
		 *         foo = Foo(...)
		 *         any = Any()
		 *         any.Pack(foo)
		 *         ...
		 *         if any.Is(Foo.DESCRIPTOR):
		 *           any.Unpack(foo)
		 *           ...
		 *
		 *     Example 4: Pack and unpack a message in Go
		 *
		 *          foo := &pb.Foo{...}
		 *          any, err := anypb.New(foo)
		 *          if err != nil {
		 *            ...
		 *          }
		 *          ...
		 *          foo := &pb.Foo{}
		 *          if err := any.UnmarshalTo(foo); err != nil {
		 *            ...
		 *          }
		 *
		 *     The pack methods provided by protobuf library will by default use
		 *     'type.googleapis.com/full.type.name' as the type URL and the unpack
		 *     methods only use the fully qualified type name after the last '/'
		 *     in the type URL, for example "foo.bar.com/x/y.z" will yield type
		 *     name "y.z".
		 *
		 *
		 *     JSON
		 *
		 *     The JSON representation of an `Any` value uses the regular
		 *     representation of the deserialized, embedded message, with an
		 *     additional field `@type` which contains the type URL. Example:
		 *
		 *         package google.profile;
		 *         message Person {
		 *           string first_name = 1;
		 *           string last_name = 2;
		 *         }
		 *
		 *         {
		 *           "@type": "type.googleapis.com/google.profile.Person",
		 *           "firstName": <string>,
		 *           "lastName": <string>
		 *         }
		 *
		 *     If the embedded message type is well-known and has a custom JSON
		 *     representation, that representation will be embedded adding a field
		 *     `value` which holds the custom JSON in addition to the `@type`
		 *     field. Example (for message [google.protobuf.Duration][]):
		 *
		 *         {
		 *           "@type": "type.googleapis.com/google.protobuf.Duration",
		 *           "value": "1.212s"
		 *         } */
		protobufAny: {
			/** @description A URL/resource name that uniquely identifies the type of the serialized
			 *     protocol buffer message. This string must contain at least
			 *     one "/" character. The last segment of the URL's path must represent
			 *     the fully qualified name of the type (as in
			 *     `path/google.protobuf.Duration`). The name should be in a canonical form
			 *     (e.g., leading "." is not accepted).
			 *
			 *     In practice, teams usually precompile into the binary all types that they
			 *     expect it to use in the context of Any. However, for URLs which use the
			 *     scheme `http`, `https`, or no scheme, one can optionally set up a type
			 *     server that maps type URLs to message definitions as follows:
			 *
			 *     * If no scheme is provided, `https` is assumed.
			 *     * An HTTP GET on the URL must yield a [google.protobuf.Type][]
			 *       value in binary format, or produce an error.
			 *     * Applications are allowed to cache lookup results based on the
			 *       URL, or have them precompiled into a binary to avoid any
			 *       lookup. Therefore, binary compatibility needs to be preserved
			 *       on changes to types. (Use versioned type names to manage
			 *       breaking changes.)
			 *
			 *     Note: this functionality is not currently available in the official
			 *     protobuf release, and it is not used for type URLs beginning with
			 *     type.googleapis.com.
			 *
			 *     Schemes other than `http`, `https` (or the empty scheme) might be
			 *     used with implementation specific semantics. */
			type_url?: string;
			/**
			 * Format: byte
			 * @description Must be a valid serialized protocol buffer of the above specified type.
			 */
			value?: string;
		};
		/** @description The `Status` type defines a logical error model that is suitable for
		 *     different programming environments, including REST APIs and RPC APIs. It is
		 *     used by [gRPC](https://github.com/grpc). Each `Status` message contains
		 *     three pieces of data: error code, error message, and error details.
		 *
		 *     You can find out more about this error model and how to work with it in the
		 *     [API Design Guide](https://cloud.google.com/apis/design/errors). */
		rpcStatus: {
			/**
			 * Format: int32
			 * @description The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
			 */
			code?: number;
			/** @description A developer-facing error message, which should be in English. Any
			 *     user-facing error message should be localized and sent in the
			 *     [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client. */
			message?: string;
			/** @description A list of messages that carry the error details.  There is a common set of
			 *     message types for APIs to use. */
			details?: components["schemas"]["protobufAny"][];
		};
		/**
		 * @default BPModel_Unknown
		 * @enum {string}
		 */
		systemAPIBPModel: "BPModel_Unknown" | "BPv1" | "BPv2" | "NoBP";
		/**
		 * @default RGB
		 * @enum {string}
		 */
		systemAPIColorFormat:
			| "RGB"
			| "YUV444"
			| "YUV422"
			| "YUV420"
			| "ColorFormat_Unknown";
		/**
		 * @default Generation_Unknown
		 * @enum {string}
		 */
		systemAPIVFCGeneration: "Generation_Unknown" | "One" | "Two" | "None";
		systemD3VersionInfo: {
			/**
			 * Major Version
			 * Format: int64
			 */
			major?: number;
			/**
			 * Minor Version
			 * Format: int64
			 */
			minor?: number;
			/**
			 * Patch Version (Double dot version)
			 * Format: int64
			 */
			hotfix?: number;
			/**
			 * Revision from Mercurial
			 * Format: int64
			 */
			revision?: number;
		};
		systemDetectSystemsResponse: {
			status?: components["schemas"]["rpcStatus"];
			/** Information about all systems on the network */
			result?: components["schemas"]["systemSystemInfo"][];
		};
		systemGPUOutputInfo: {
			/**
			 * GPU port
			 * Format: int64
			 */
			gpuPort?: number;
			genlockState?: components["schemas"]["systemGenlockState"];
			/** Is passive dongle */
			emulated?: boolean;
			resolution?: components["schemas"]["systemResolution"];
			/**
			 * Refresh rate
			 * Format: float
			 */
			refreshRate?: number;
			/**
			 * Bit depth
			 * Format: int64
			 */
			bitDepth?: number;
			colourFormat?: components["schemas"]["systemAPIColorFormat"];
		};
		systemGPUOutputsInfo: {
			/** Machine host name */
			hostname?: string;
			genlock?: components["schemas"]["systemGenlockInfo"];
			/** Information about all gpu outputs in the system */
			gpuOutputs?: components["schemas"]["systemGPUOutputInfo"][];
		};
		systemGenlockInfo: {
			/**
			 * Genlock frequency
			 * Format: float
			 */
			frequency?: number;
		};
		/**
		 * @default FreeRun
		 * @enum {string}
		 */
		systemGenlockState:
			| "FreeRun"
			| "Internal"
			| "External"
			| "GenlockState_Unknown";
		systemGetGPUOutputsReponse: {
			status?: components["schemas"]["rpcStatus"];
			/** Information about all gpu outputs on the network */
			result?: components["schemas"]["systemGPUOutputsInfo"][];
		};
		systemGetNetworkAdaptersResponse: {
			status?: components["schemas"]["rpcStatus"];
			/** Information about all net adapters on the network */
			result?: components["schemas"]["systemNetAdapterInSystemsInfo"][];
		};
		systemGetVFCsResponse: {
			status?: components["schemas"]["rpcStatus"];
			/** Information about all vfcs on the network */
			result?: components["schemas"]["systemVFCInfo"][];
		};
		/**
		 * @default IPv4
		 * @enum {string}
		 */
		systemIPFamily: "IPv4" | "IPv6";
		systemIpAddressInfo: {
			/** v4 address */
			address?: string;
			subnet?: string;
			family?: components["schemas"]["systemIPFamily"];
			/** Default gateway of the network adapter */
			gateway?: string;
		};
		systemListProjectsResponse: {
			status?: components["schemas"]["rpcStatus"];
			/** Information about all project on the network */
			result?: components["schemas"]["systemProjectsInSystemInfo"][];
		};
		systemNetAdapterInSystemsInfo: {
			/** Machine host name */
			hostname?: string;
			/** Information about all net adapters in the system */
			netAdapters?: components["schemas"]["systemNetAdapterInfo"][];
		};
		systemNetAdapterInfo: {
			/** Adapter name */
			name?: string;
			/** Mac-address */
			mac?: string;
			/** is adapter enabled */
			enabled?: boolean;
			/** is using DHCP */
			dhcp?: boolean;
			status?: components["schemas"]["systemOperationalStatus"];
			/** IP addresses */
			addresses?: components["schemas"]["systemIpAddressInfo"][];
		};
		/**
		 * @default OperationalStatus_Unknown
		 * @enum {string}
		 */
		systemOperationalStatus:
			| "OperationalStatus_Unknown"
			| "Up"
			| "Down"
			| "Testing"
			| "Dormant"
			| "NotPresent"
			| "LowerLayerDown";
		systemProjectInfo: {
			/** Full path of the project */
			path?: string;
			/** Last modified date of d3 project file e.g. 2019-09-07T15:50+00Z */
			lastModified?: string;
			version?: components["schemas"]["systemD3VersionInfo"];
		};
		systemProjectsInSystemInfo: {
			/** Machine host name */
			hostname?: string;
			/** Last project name */
			lastProject?: string;
			/** Information about all projects in the system */
			projects?: components["schemas"]["systemProjectInfo"][];
		};
		systemResolution: {
			/**
			 * width in pixel, can be 0
			 * Format: int64
			 */
			width?: number;
			/**
			 * height in pixel, can be 0
			 * Format: int64
			 */
			height?: number;
		};
		systemSystemInfo: {
			/** Machine host name */
			hostname?: string;
			/** Machine model */
			type?: string;
			version?: components["schemas"]["systemD3VersionInfo"];
			/** Currently running designer project */
			runningProject?: string;
			/** IP Address (IPV4) */
			ipAddress?: string;
			/** is d3.exe running */
			isDesignerRunning?: boolean;
			/** is d3service.exe running */
			isServiceRunning?: boolean;
			/** is d3manager.exe running */
			isManagerRunning?: boolean;
			/** is notch_host.exe running */
			isNotchHostRunning?: boolean;
		};
		systemVFCCard: {
			/**
			 * Slot
			 * Format: int64
			 */
			slot?: number;
			type?: components["schemas"]["systemVFCType"];
			/** Firmware Version, can be 0.0.0 */
			firmwareVersion?: string;
			/** FPGA Version, can be 0.0.0 */
			fpgaVersion?: string;
			splitMode?: components["schemas"]["systemVFCSplitMode"];
			generation?: components["schemas"]["systemAPIVFCGeneration"];
			ports?: components["schemas"]["systemVFCPorts"];
		};
		systemVFCInfo: {
			/** Machine host name */
			hostname?: string;
			backplaneVersion?: components["schemas"]["systemAPIBPModel"];
			/** VFC Card */
			cards?: components["schemas"]["systemVFCCard"][];
		};
		systemVFCPort: {
			resolution?: components["schemas"]["systemResolution"];
			/**
			 * VFC port refresh rate, can be 0
			 * Format: float
			 */
			RefreshRate?: number;
			/** VFC port name */
			name?: string;
		};
		systemVFCPorts: {
			a?: components["schemas"]["systemVFCPort"];
			b?: components["schemas"]["systemVFCPort"];
			c?: components["schemas"]["systemVFCPort"];
			d?: components["schemas"]["systemVFCPort"];
		};
		/**
		 * @default SplitMode_Unknown
		 * @enum {string}
		 */
		systemVFCSplitMode:
			| "SplitMode_Unknown"
			| "Mirror"
			| "Dual"
			| "Quad"
			| "Quad4K"
			| "NoSwizzle";
		/**
		 * @default VFCType_Unknown
		 * @enum {string}
		 */
		systemVFCType:
			| "VFCType_Unknown"
			| "Mock"
			| "DP_Passthrough"
			| "DP12_Passthrough"
			| "DP14_Passthrough"
			| "QuadDVI"
			| "QuadSDI"
			| "HDMI"
			| "IP"
			| "NoVFC";
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	Project_ForceQuitLocalProject: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A successful response. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["d3apiEmptyResponse"];
				};
			};
		};
	};
	Project_QuitLocalProject: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A successful response. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["d3apiEmptyResponse"];
				};
			};
		};
	};
	Project_RestartLocalProject: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A successful response. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["d3apiEmptyResponse"];
				};
			};
		};
	};
	Project_StartLocalProject: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["projectStartLocalProjectRequest"];
			};
		};
		responses: {
			/** @description A successful response. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["d3apiEmptyResponse"];
				};
			};
		};
	};
	System_DetectSystems: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A successful response. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["systemDetectSystemsResponse"];
				};
			};
		};
	};
	System_GetGPUOutputs: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A successful response. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["systemGetGPUOutputsReponse"];
				};
			};
		};
	};
	System_GetNetworkAdapters: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A successful response. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["systemGetNetworkAdaptersResponse"];
				};
			};
		};
	};
	System_ListProjects: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A successful response. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["systemListProjectsResponse"];
				};
			};
		};
	};
	System_GetVFCs: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description A successful response. */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["systemGetVFCsResponse"];
				};
			};
		};
	};
}
