openapi: 3.0.1
info:
  title: d3 API
  version: 2.0.0
servers:
  - url: /api/service
paths:
  /project/forcequitlocalproject:
    post:
      tags:
        - Project
      summary: Force quit an active disguise project
      operationId: Project_ForceQuitLocalProject
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/d3apiEmptyResponse"
  /project/quitlocalproject:
    post:
      tags:
        - Project
      summary: Quit an active disguise project
      operationId: Project_QuitLocalProject
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/d3apiEmptyResponse"
  /project/restartlocalproject:
    post:
      tags:
        - Project
      summary: Restart an active disguise project
      operationId: Project_RestartLocalProject
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/d3apiEmptyResponse"
  /project/startlocalproject:
    post:
      tags:
        - Project
      summary: Start a disguise project
      operationId: Project_StartLocalProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/projectStartLocalProjectRequest"
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/d3apiEmptyResponse"
      x-codegen-request-body-name: body
  /system/detectsystems:
    get:
      tags:
        - System
      summary: List all remote machines and local machine system info
      operationId: System_DetectSystems
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/systemDetectSystemsResponse"
  /system/gpuoutputs:
    get:
      tags:
        - System
      summary: List all GPU Output (only works on d3 machine)
      operationId: System_GetGPUOutputs
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/systemGetGPUOutputsReponse"
  /system/networkadapters:
    get:
      tags:
        - System
      summary: List all Network Adapters
      operationId: System_GetNetworkAdapters
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/systemGetNetworkAdaptersResponse"
  /system/projects:
    get:
      tags:
        - System
      summary: List all projects
      operationId: System_ListProjects
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/systemListProjectsResponse"
  /system/vfcs:
    get:
      tags:
        - System
      summary: List all VFC Cards
      operationId: System_GetVFCs
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/systemGetVFCsResponse"
components:
  schemas:
    d3apiEmptyResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/rpcStatus"
    projectStartLocalProjectRequest:
      type: object
      properties:
        projectPath:
          title: |-
            Path to the Project
            Path is relative to the disguise projects folder set in d3Manager, ie: "[project name]/[project file.d3]"
          type: string
        soloMode:
          type: boolean
          description: |-
            Is machine is running in the solo mode.
            Solo mode means that project is running on a standalone machine (not director set), so not as part of a wider session.
        allowUpgrade:
          type: boolean
          description: |-
            Allows to force upgrade the project.
            This flag only applies if the project being run was created in an older version of D3 and needs to be updated.
    protobufAny:
      type: object
      properties:
        type_url:
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
        value:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description:
            Must be a valid serialized protocol buffer of the above specified
            type.
          format: byte
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

        Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

        Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".


        JSON

        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    rpcStatus:
      type: object
      properties:
        code:
          type: integer
          description: "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
          format: int32
        message:
          type: string
          description: |-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          description: |-
            A list of messages that carry the error details.  There is a common set of
            message types for APIs to use.
          items:
            $ref: "#/components/schemas/protobufAny"
      description: |-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It is
        used by [gRPC](https://github.com/grpc). Each `Status` message contains
        three pieces of data: error code, error message, and error details.

        You can find out more about this error model and how to work with it in the
        [API Design Guide](https://cloud.google.com/apis/design/errors).
    systemAPIBPModel:
      type: string
      default: BPModel_Unknown
      enum:
        - BPModel_Unknown
        - BPv1
        - BPv2
        - NoBP
    systemAPIColorFormat:
      type: string
      default: RGB
      enum:
        - RGB
        - YUV444
        - YUV422
        - YUV420
        - ColorFormat_Unknown
    systemAPIVFCGeneration:
      type: string
      default: Generation_Unknown
      enum:
        - Generation_Unknown
        - One
        - Two
        - None
    systemD3VersionInfo:
      type: object
      properties:
        major:
          title: Major Version
          type: integer
          format: int64
        minor:
          title: Minor Version
          type: integer
          format: int64
        hotfix:
          title: Patch Version (Double dot version)
          type: integer
          format: int64
        revision:
          title: Revision from Mercurial
          type: integer
          format: int64
    systemDetectSystemsResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/rpcStatus"
        result:
          title: Information about all systems on the network
          type: array
          items:
            $ref: "#/components/schemas/systemSystemInfo"
    systemGPUOutputInfo:
      type: object
      properties:
        gpuPort:
          title: GPU port
          type: integer
          format: int64
        genlockState:
          $ref: "#/components/schemas/systemGenlockState"
        emulated:
          title: Is passive dongle
          type: boolean
        resolution:
          $ref: "#/components/schemas/systemResolution"
        refreshRate:
          title: Refresh rate
          type: number
          format: float
        bitDepth:
          title: Bit depth
          type: integer
          format: int64
        colourFormat:
          $ref: "#/components/schemas/systemAPIColorFormat"
    systemGPUOutputsInfo:
      type: object
      properties:
        hostname:
          title: Machine host name
          type: string
        genlock:
          $ref: "#/components/schemas/systemGenlockInfo"
        gpuOutputs:
          title: Information about all gpu outputs in the system
          type: array
          items:
            $ref: "#/components/schemas/systemGPUOutputInfo"
    systemGenlockInfo:
      type: object
      properties:
        frequency:
          title: Genlock frequency
          type: number
          format: float
    systemGenlockState:
      type: string
      default: FreeRun
      enum:
        - FreeRun
        - Internal
        - External
        - GenlockState_Unknown
    systemGetGPUOutputsReponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/rpcStatus"
        result:
          title: Information about all gpu outputs on the network
          type: array
          items:
            $ref: "#/components/schemas/systemGPUOutputsInfo"
    systemGetNetworkAdaptersResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/rpcStatus"
        result:
          title: Information about all net adapters on the network
          type: array
          items:
            $ref: "#/components/schemas/systemNetAdapterInSystemsInfo"
    systemGetVFCsResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/rpcStatus"
        result:
          title: Information about all vfcs on the network
          type: array
          items:
            $ref: "#/components/schemas/systemVFCInfo"
    systemIPFamily:
      type: string
      default: IPv4
      enum:
        - IPv4
        - IPv6
    systemIpAddressInfo:
      type: object
      properties:
        address:
          title: v4 address
          type: string
        subnet:
          type: string
        family:
          $ref: "#/components/schemas/systemIPFamily"
        gateway:
          title: Default gateway of the network adapter
          type: string
    systemListProjectsResponse:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/rpcStatus"
        result:
          title: Information about all project on the network
          type: array
          items:
            $ref: "#/components/schemas/systemProjectsInSystemInfo"
    systemNetAdapterInSystemsInfo:
      type: object
      properties:
        hostname:
          title: Machine host name
          type: string
        netAdapters:
          title: Information about all net adapters in the system
          type: array
          items:
            $ref: "#/components/schemas/systemNetAdapterInfo"
    systemNetAdapterInfo:
      type: object
      properties:
        name:
          title: Adapter name
          type: string
        mac:
          title: Mac-address
          type: string
        enabled:
          title: is adapter enabled
          type: boolean
        dhcp:
          title: is using DHCP
          type: boolean
        status:
          $ref: "#/components/schemas/systemOperationalStatus"
        addresses:
          title: IP addresses
          type: array
          items:
            $ref: "#/components/schemas/systemIpAddressInfo"
    systemOperationalStatus:
      type: string
      default: OperationalStatus_Unknown
      enum:
        - OperationalStatus_Unknown
        - Up
        - Down
        - Testing
        - Dormant
        - NotPresent
        - LowerLayerDown
    systemProjectInfo:
      type: object
      properties:
        path:
          title: Full path of the project
          type: string
        lastModified:
          title: Last modified date of d3 project file e.g. 2019-09-07T15:50+00Z
          type: string
        version:
          $ref: "#/components/schemas/systemD3VersionInfo"
    systemProjectsInSystemInfo:
      type: object
      properties:
        hostname:
          title: Machine host name
          type: string
        lastProject:
          title: Last project name
          type: string
        projects:
          title: Information about all projects in the system
          type: array
          items:
            $ref: "#/components/schemas/systemProjectInfo"
    systemResolution:
      type: object
      properties:
        width:
          title: "width in pixel, can be 0"
          type: integer
          format: int64
        height:
          title: "height in pixel, can be 0"
          type: integer
          format: int64
    systemSystemInfo:
      type: object
      properties:
        hostname:
          title: Machine host name
          type: string
        type:
          title: Machine model
          type: string
        version:
          $ref: "#/components/schemas/systemD3VersionInfo"
        runningProject:
          title: Currently running designer project
          type: string
        ipAddress:
          title: IP Address (IPV4)
          type: string
        isDesignerRunning:
          title: is d3.exe running
          type: boolean
        isServiceRunning:
          title: is d3service.exe running
          type: boolean
        isManagerRunning:
          title: is d3manager.exe running
          type: boolean
        isNotchHostRunning:
          title: is notch_host.exe running
          type: boolean
    systemVFCCard:
      type: object
      properties:
        slot:
          title: Slot
          type: integer
          format: int64
        type:
          $ref: "#/components/schemas/systemVFCType"
        firmwareVersion:
          title: "Firmware Version, can be 0.0.0"
          type: string
        fpgaVersion:
          title: "FPGA Version, can be 0.0.0"
          type: string
        splitMode:
          $ref: "#/components/schemas/systemVFCSplitMode"
        generation:
          $ref: "#/components/schemas/systemAPIVFCGeneration"
        ports:
          $ref: "#/components/schemas/systemVFCPorts"
    systemVFCInfo:
      type: object
      properties:
        hostname:
          title: Machine host name
          type: string
        backplaneVersion:
          $ref: "#/components/schemas/systemAPIBPModel"
        cards:
          title: VFC Card
          type: array
          items:
            $ref: "#/components/schemas/systemVFCCard"
    systemVFCPort:
      type: object
      properties:
        resolution:
          $ref: "#/components/schemas/systemResolution"
        RefreshRate:
          title: "VFC port refresh rate, can be 0"
          type: number
          format: float
        name:
          title: VFC port name
          type: string
    systemVFCPorts:
      type: object
      properties:
        a:
          $ref: "#/components/schemas/systemVFCPort"
        b:
          $ref: "#/components/schemas/systemVFCPort"
        c:
          $ref: "#/components/schemas/systemVFCPort"
        d:
          $ref: "#/components/schemas/systemVFCPort"
    systemVFCSplitMode:
      type: string
      default: SplitMode_Unknown
      enum:
        - SplitMode_Unknown
        - Mirror
        - Dual
        - Quad
        - Quad4K
        - NoSwizzle
    systemVFCType:
      type: string
      default: VFCType_Unknown
      enum:
        - VFCType_Unknown
        - Mock
        - DP_Passthrough
        - DP12_Passthrough
        - DP14_Passthrough
        - QuadDVI
        - QuadSDI
        - HDMI
        - IP
        - NoVFC
x-original-swagger-version: "2.0"
